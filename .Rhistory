library(shiny); runApp('C:/Users/csvan/Desktop/R shiny/cshw2/SiChenhw2.R')
# Chunk 1: setup
library(flexdashboard)
library(shiny)
library(reshape2)
library(dplyr)
library(plotly)
pdf(NULL)
starwars.load <- starwars %>%
mutate(films = as.character(films),
vehicles = as.character(vehicles),
starships = as.character(starships),
name = as.factor(name))
swInput <- reactive({
starwars <- starwars.load %>%
# Slider Filter
filter(birth_year >= input$birthSelect[1] & birth_year <= input$birthSelect[2])
# Homeworld Filter
if (length(input$worldSelect) > 0 ) {
starwars <- subset(starwars, homeworld %in% input$worldSelect)
}
return(starwars)
})
# Reactive melted data
mwInput <- reactive({
swInput() %>%
melt(id = "name")
})
# Chunk 2
selectInput("worldSelect",
"Homeworld:",
choices = sort(unique(starwars.load$homeworld)),
multiple = TRUE,
selectize = TRUE,
selected = c("Naboo", "Tatooine"))
# Birth Selection
sliderInput("birthSelect",
"Birth Year:",
min = min(starwars.load$birth_year, na.rm = T),
max = max(starwars.load$birth_year, na.rm = T),
value = c(min(starwars.load$birth_year, na.rm = T), max(starwars.load$birth_year, na.rm = T)),
step = 1)
# Chunk 3
renderValueBox({
sw <- swInput()
num <- round(mean(sw$mass, na.rm = T), 2)
valueBox("Avg Mass", value = num, icon = "fa-balance-scale", color = "purple")
})
# Chunk 4
renderValueBox({
sw <- swInput()
num <- round(mean(sw$height, na.rm = T), 2)
valueBox("Avg Height", value = num, icon = "fa-sort-numeric-desc", color = "green")
})
# Chunk 5
renderGauge({
rate <- round(as.numeric(length(input$worldSelect)) / length(unique(starwars.load$homeworld)) * 100, 1)
gauge(rate, min = 0, max = 100, symbol = '%', gaugeSectors(
success = c(80, 100), warning = c(40, 79), danger = c(0, 39)))
})
# Chunk 6
renderPlotly({
dat <- subset(mwInput(), variable == "mass")
ggplot(data = dat, aes(x = name, y = as.numeric(value), fill = name)) + geom_bar(stat = "identity")
})
# Chunk 7
renderPlotly({
dat <- subset(mwInput(),  variable == "height")
ggplot(data = dat, aes(x = name, y = as.numeric(value), fill = name)) + geom_bar(stat = "identity")
})
# Chunk 8
DT::renderDataTable({
subset(swInput(), select = c(name, height, mass, birth_year, homeworld, species))
})
# Chunk 9
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
runApp('~/GitHub/Class_7-CSS/Navbar/app_final.R')
runApp('~/GitHub/Class_7-CSS/Navbar/app_final.R')
runApp('~/GitHub/Class_7-CSS/Navbar/app_final.R')
runApp('~/GitHub/Class_6-Dashboards/Dashboard Example - FINAL')
runApp('~/GitHub/csproject1/SiChenProject_1.R')
ride <- read.csv('./ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
library(flexdashboard)
library(shiny)
library(dplyr)
library(plotly)
library(reshape2)
library(shinythemes)
library(tibble)
#input data
ride <- read.csv('./ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.id <- NULL
ride$To.station.id <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride$Bikeid <- NULL
ride <- ride%>%
mutate(speedlevel = as.character(speedlevel),
Usertype = as.factor(Usertype))
swInput <- reactive({
ride.filter <- ride %>%
#slider tripduration filter
filter(Tripduration >= input$TripdurationSelect[1] & Tripduration <= input$TripdurationSelect[2])
#selectinput speedlevel filter
if (length(input$SpeedSelect) > 0 ) {
ride.filter <- subset(ride.filter, speedlevel%in% input$SpeedSelect)
}
#check box usertype Filter
ride.filter <- subset(ride.filter, Usertype%in%input$UserSelect)
return(ride.filter)
})
mwInput <- reactive({
swInput() %>%
melt(id = "Usertype")
})
pdf(NULL)
library(flexdashboard)
library(shiny)
library(dplyr)
library(plotly)
library(reshape2)
library(shinythemes)
library(tibble)
#input data
ride <- read.csv('./ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.id <- NULL
ride$To.station.id <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride$Bikeid <- NULL
ride <- ride%>%
mutate(speedlevel = as.character(speedlevel),
Usertype = as.factor(Usertype))
swInput <- reactive({
ride.filter <- ride %>%
#slider tripduration filter
filter(Tripduration >= input$TripdurationSelect[1] & Tripduration <= input$TripdurationSelect[2])
#selectinput speedlevel filter
if (length(input$SpeedSelect) > 0 ) {
ride.filter <- subset(ride.filter, speedlevel%in% input$SpeedSelect)
}
#check box usertype Filter
ride.filter <- subset(ride.filter, Usertype%in%input$UserSelect)
return(ride.filter)
})
mwInput <- reactive({
swInput() %>%
melt(id = "Usertype")
})
pdf(NULL)
ride <- read.csv('./ride.csv', head=TRUE)
ride <- read.csv('./ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.id <- NULL
ride$To.station.id <- NULL
ride$From.station.name <- NULL
ride <- read.csv('./ride.csv', head=TRUE)
setwd("~/GitHub/csproject1")
setwd("~/GitHub/csproject1")
ride <- read.csv('~/GitHub/csproject1/ride.csv', head=TRUE)
View(ride)
library(flexdashboard)
library(shiny)
library(dplyr)
library(plotly)
library(reshape2)
library(shinythemes)
library(tibble)
#input data
ride <- read.csv('~/GitHub/csproject1/ride.csv', head=TRUE)
ride$Starttime <- NULL
ride$Stoptime <- NULL
ride$From.station.id <- NULL
ride$To.station.id <- NULL
ride$From.station.name <- NULL
ride$To.station.name <- NULL
ride <- ride%>%
mutate(speedlevel = as.character(speedlevel),
Usertype = as.factor(Usertype))
rideInput <- reactive({
ride.filter <- ride %>%
#slider tripduration filter
filter(Tripduration >= input$TripdurationSelect[1] & Tripduration <= input$TripdurationSelect[2])
#selectinput speedlevel filter
if (length(input$SpeedSelect) > 0 ) {
ride.filter <- subset(ride.filter, speedlevel%in% input$SpeedSelect)
}
#check box usertype Filter
ride.filter <- subset(ride.filter, Usertype%in%input$UserSelect)
return(ride.filter)
})
mwInput <- reactive({
rideInput() %>%
melt(id = "Usertype")
})
pdf(NULL)
View(ride)
